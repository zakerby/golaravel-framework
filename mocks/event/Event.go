// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	event "github.com/goravel/framework/contracts/event"
	mock "github.com/stretchr/testify/mock"
)

// Event is an autogenerated mock type for the Event type
type Event struct {
	mock.Mock
}

// Handle provides a mock function with given fields: args
func (_m *Event) Handle(args []event.Arg) ([]event.Arg, error) {
	ret := _m.Called(args)

	var r0 []event.Arg
	var r1 error
	if rf, ok := ret.Get(0).(func([]event.Arg) ([]event.Arg, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func([]event.Arg) []event.Arg); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]event.Arg)
		}
	}

	if rf, ok := ret.Get(1).(func([]event.Arg) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEvent creates a new instance of Event. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *Event {
	mock := &Event{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
