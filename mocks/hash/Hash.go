// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Hash is an autogenerated mock type for the Hash type
type Hash struct {
	mock.Mock
}

// Check provides a mock function with given fields: value, hashedValue
func (_m *Hash) Check(value string, hashedValue string) bool {
	ret := _m.Called(value, hashedValue)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(value, hashedValue)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Make provides a mock function with given fields: value
func (_m *Hash) Make(value string) (string, error) {
	ret := _m.Called(value)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(value)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NeedsRehash provides a mock function with given fields: hashedValue
func (_m *Hash) NeedsRehash(hashedValue string) bool {
	ret := _m.Called(hashedValue)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(hashedValue)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewHash creates a new instance of Hash. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHash(t interface {
	mock.TestingT
	Cleanup(func())
}) *Hash {
	mock := &Hash{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
