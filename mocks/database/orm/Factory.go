// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	orm "github.com/goravel/framework/contracts/database/orm"
	mock "github.com/stretchr/testify/mock"
)

// Factory is an autogenerated mock type for the Factory type
type Factory struct {
	mock.Mock
}

// Count provides a mock function with given fields: count
func (_m *Factory) Count(count int) orm.Factory {
	ret := _m.Called(count)

	var r0 orm.Factory
	if rf, ok := ret.Get(0).(func(int) orm.Factory); ok {
		r0 = rf(count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Factory)
		}
	}

	return r0
}

// Create provides a mock function with given fields: value, attributes
func (_m *Factory) Create(value interface{}, attributes ...map[string]interface{}) error {
	_va := make([]interface{}, len(attributes))
	for _i := range attributes {
		_va[_i] = attributes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, value)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...map[string]interface{}) error); ok {
		r0 = rf(value, attributes...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateQuietly provides a mock function with given fields: value, attributes
func (_m *Factory) CreateQuietly(value interface{}, attributes ...map[string]interface{}) error {
	_va := make([]interface{}, len(attributes))
	for _i := range attributes {
		_va[_i] = attributes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, value)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...map[string]interface{}) error); ok {
		r0 = rf(value, attributes...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Make provides a mock function with given fields: value, attributes
func (_m *Factory) Make(value interface{}, attributes ...map[string]interface{}) error {
	_va := make([]interface{}, len(attributes))
	for _i := range attributes {
		_va[_i] = attributes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, value)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...map[string]interface{}) error); ok {
		r0 = rf(value, attributes...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFactory creates a new instance of Factory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *Factory {
	mock := &Factory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
