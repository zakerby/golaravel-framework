// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	context "context"

	config "github.com/goravel/framework/contracts/config"

	gorm "github.com/goravel/framework/contracts/database/gorm"

	mock "github.com/stretchr/testify/mock"

	orm "github.com/goravel/framework/contracts/database/orm"
)

// Initialize is an autogenerated mock type for the Initialize type
type Initialize struct {
	mock.Mock
}

// InitializeGorm provides a mock function with given fields: _a0, connection
func (_m *Initialize) InitializeGorm(_a0 config.Config, connection string) gorm.Gorm {
	ret := _m.Called(_a0, connection)

	var r0 gorm.Gorm
	if rf, ok := ret.Get(0).(func(config.Config, string) gorm.Gorm); ok {
		r0 = rf(_a0, connection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gorm.Gorm)
		}
	}

	return r0
}

// InitializeQuery provides a mock function with given fields: ctx, _a1, connection
func (_m *Initialize) InitializeQuery(ctx context.Context, _a1 config.Config, connection string) (orm.Query, error) {
	ret := _m.Called(ctx, _a1, connection)

	var r0 orm.Query
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.Config, string) (orm.Query, error)); ok {
		return rf(ctx, _a1, connection)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.Config, string) orm.Query); ok {
		r0 = rf(ctx, _a1, connection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Query)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.Config, string) error); ok {
		r1 = rf(ctx, _a1, connection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInitialize creates a new instance of Initialize. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInitialize(t interface {
	mock.TestingT
	Cleanup(func())
}) *Initialize {
	mock := &Initialize{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
