// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	validation "github.com/goravel/framework/contracts/validation"
	mock "github.com/stretchr/testify/mock"
)

// Rule is an autogenerated mock type for the Rule type
type Rule struct {
	mock.Mock
}

// Message provides a mock function with given fields:
func (_m *Rule) Message() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Passes provides a mock function with given fields: data, val, options
func (_m *Rule) Passes(data validation.Data, val interface{}, options ...interface{}) bool {
	var _ca []interface{}
	_ca = append(_ca, data, val)
	_ca = append(_ca, options...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(validation.Data, interface{}, ...interface{}) bool); ok {
		r0 = rf(data, val, options...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Signature provides a mock function with given fields:
func (_m *Rule) Signature() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewRule creates a new instance of Rule. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRule(t interface {
	mock.TestingT
	Cleanup(func())
}) *Rule {
	mock := &Rule{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
