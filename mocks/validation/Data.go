// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Data is an autogenerated mock type for the Data type
type Data struct {
	mock.Mock
}

// Get provides a mock function with given fields: key
func (_m *Data) Get(key string) (interface{}, bool) {
	ret := _m.Called(key)

	var r0 interface{}
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (interface{}, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Set provides a mock function with given fields: key, val
func (_m *Data) Set(key string, val interface{}) error {
	ret := _m.Called(key, val)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewData creates a new instance of Data. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewData(t interface {
	mock.TestingT
	Cleanup(func())
}) *Data {
	mock := &Data{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
